{"version":3,"sources":["components/navbar.jsx","components/quote.jsx","components/quotes.jsx","components/symbol.jsx","components/symbols.jsx","App.js","serviceWorker.js","index.js"],"names":["NavBar","state","className","to","ref","type","placeholder","Component","Quote","quote","this","props","companyName","primaryExchange","symbol","latestPrice","formatChangePercent","formatChange","changePercent","change","Quotes","quotes","fetchQuotes","a","getWatchList","forEach","console","log","fetch","buildQuoteUrl","then","response","json","buildQuotesList","catch","symbols","JSON","parse","localStorage","getItem","length","Array","BASE_URL","TOKEN","buildQuote","setState","push","map","key","id","Symbol","name","Symbols","fetchSymbols","buildSymbolsUrl","data","buildSymbolsList","handleSymbolClick","index","includes","setItem","stringify","style","width","height","rowCount","rowHeight","rowRenderer","bind","overscanRowCount","isScrolling","isVisible","onClick","App","path","component","document","body","paddingTop","Boolean","window","location","hostname","match","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.d1a29ea2.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\n\nclass NavBar extends Component {\n  state = {};\n  render() {\n    return (\n      <nav className=\"navbar fixed-top navbar-light bg-dark\">\n        <Link className=\"w-100\" to=\"/symbols\">\n          <input\n            ref=\"symbolInput\"\n            type=\"text\"\n            className=\"text-dark w-100 rounded border-0 m-1 p-2 h5\"\n            placeholder=\"Search for stocks\"\n          />\n        </Link>\n      </nav>\n    );\n  }\n}\n\nexport default NavBar;\n","import React, { Component } from \"react\";\n\nclass Quote extends Component {\n  state = {};\n  render() {\n    const quote = this.props.quote;\n    return (\n      <div>\n        <h5>{quote.companyName}</h5>\n        <span className=\"badge badge-primary\">{quote.primaryExchange}</span>\n        <strong className=\"text-muted ml-2\">{quote.symbol}</strong>\n        <span className=\"text-center h4 p-2\">{quote.latestPrice}</span>\n        <span className=\"text-center h5 p-2\">{this.formatChangePercent()}</span>\n        <span className=\"text-center h6\">{this.formatChange()}</span>\n      </div>\n    );\n  }\n\n  formatChangePercent() {\n    const quote = this.props.quote;\n    return quote.changePercent < 0 ? (\n      <span className=\"text-danger\">\n        {quote.changePercent * -1 * 100 + \"%\"}\n      </span>\n    ) : (\n      <span className=\"text-success\">{quote.changePercent * 100 + \"%\"}</span>\n    );\n  }\n\n  formatChange() {\n    const quote = this.props.quote;\n    return quote.change < 0 ? (\n      <span className=\"text-secondary\">\n        {\"(\" + quote.change * -1 + \"\\u25bc\" + \")\"}\n      </span>\n    ) : (\n      <span className=\"text-secondary\">\n        {\"(\" + quote.change + \"\\u25b2\" + \")\"}\n      </span>\n    );\n  }\n}\n\nexport default Quote;\n","import React, { Component } from \"react\";\nimport Quote from \"./quote\";\nimport { BASE_URL, TOKEN } from \"../App\";\n\nclass Quotes extends Component {\n  state = {\n    quotes: []\n  };\n  render() {\n    return (\n      <div className=\"\">\n        <ul className=\"m-2 pt-300 list-group\">\n          {this.state.quotes.map(quote => (\n            <li\n              key={quote.symbol}\n              id={quote.symbol}\n              className=\"list-group-item\"\n            >\n              <Quote quote={quote} />\n            </li>\n          ))}\n        </ul>\n      </div>\n    );\n  }\n\n  componentDidMount() {\n    this.fetchQuotes();\n\n    const quotes = [\n      {\n        symbol: \"AAPL\",\n        companyName: \"Apple Inc.\",\n        primaryExchange: \"NASDAQ\",\n        latestPrice: 145.24,\n        changePercent: 0.00145,\n        change: 5.5\n      },\n      {\n        symbol: \"GOOG\",\n        companyName: \"Google Ltd.\",\n        primaryExchange: \"NASDAQ\",\n        latestPrice: 752.12,\n        changePercent: 0.00245,\n        change: 14.35\n      }\n    ];\n    //this.buildQuotesList(quotes);\n  }\n\n  fetchQuotes = async () => {\n    await this.getWatchList().forEach(symbol => {\n      console.log(symbol);\n      fetch(this.buildQuoteUrl(symbol))\n        .then(response => response.json())\n        .then(this.buildQuotesList)\n        .catch();\n    });\n  };\n\n  getWatchList = () => {\n    let symbols = JSON.parse(localStorage.getItem(\"symbols\"));\n    const index = symbols ? symbols.length : 0;\n    if (index === 0) symbols = Array();\n    return symbols;\n  };\n\n  buildQuoteUrl = symbol => {\n    return BASE_URL + \"stock/\" + symbol + \"/quote\" + TOKEN;\n  };\n\n  buildQuote = quote => {\n    this.setState({ quote });\n  };\n\n  buildQuotesList = quote => {\n    console.log(quote);\n    let quotes = this.state.quotes;\n    quotes.push(quote);\n    this.setState({ quotes });\n    console.log(this.state.quotes);\n  };\n}\n\nexport default Quotes;\n","import React, { Component } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nclass Symbol extends Component {\n  state = {\n    symbol: this.props.symbol,\n    name: this.props.name\n  };\n  render() {\n    return (\n      <div>\n        <h5>{this.state.symbol}</h5>\n        <h6>{this.state.name}</h6>\n      </div>\n    );\n  }\n}\n\nexport default Symbol;\n","import React, { Component } from \"react\";\nimport Symbol from \"./symbol\";\nimport { BASE_URL, TOKEN } from \"../App\";\nimport { Link } from \"react-router-dom\";\nimport { List, AutoSizer } from \"react-virtualized\";\n\nclass Symbols extends Component {\n  state = {\n    symbols: []\n  };\n\n  render() {\n    return (\n      <div className=\"\">\n        <AutoSizer style={{ width: \"75%\", height: \"90vh\" }}>\n          {({ width, height }) => (\n            <ul className=\"list-group\">\n              <List\n                rowCount={this.state.symbols.length}\n                width={width}\n                height={height}\n                rowHeight={70}\n                rowRenderer={this.rowRenderer.bind(this)}\n                overscanRowCount={3}\n              />\n            </ul>\n          )}\n        </AutoSizer>\n      </div>\n    );\n  }\n\n  rowRenderer({\n    key, // Unique key within array of rows\n    index, // Index of row within collection\n    isScrolling, // The List is currently being scrolled\n    isVisible, // This row is visible within the List (eg it is not an overscanned row)\n    style // Style object to be applied to row (to position it)\n  }) {\n    const symbol = this.state.symbols[index];\n    return (\n      <div\n        onClick={() => this.handleSymbolClick(symbol.symbol)}\n        className=\"m-2 \"\n        key={key}\n        style={style}\n      >\n        <Link to=\"/\" className=\"text-decoration-none text-dark\">\n          <li className=\"list-group-item\" style={{ width: \"96%\" }}>\n            <Symbol symbol={symbol.symbol} name={symbol.name} />\n          </li>\n        </Link>\n      </div>\n    );\n  }\n\n  componentDidMount() {\n    this.fetchSymbols();\n  }\n\n  fetchSymbols = async () => {\n    const data = await fetch(this.buildSymbolsUrl());\n    const symbols = await data.json();\n    console.log(symbols.length);\n    this.buildSymbolsList(symbols);\n  };\n\n  buildSymbolsList = symbols => {\n    this.setState({ symbols });\n  };\n\n  buildSymbolsUrl = () => {\n    return BASE_URL + \"ref-data/symbols\" + TOKEN;\n  };\n\n  handleSymbolClick = symbol => {\n    //localStorage.removeItem(\"symbols\");\n    let symbols = JSON.parse(localStorage.getItem(\"symbols\"));\n    const index = symbols ? symbols.length : 0;\n    if (index > 0) {\n      if (!symbols.includes(symbol)) symbols[index] = symbol;\n    } else symbols = Array(symbol);\n\n    localStorage.setItem(\"symbols\", JSON.stringify(symbols));\n    console.log(symbols);\n    //console.log(JSON.parse(localStorage.getItem(\"symbol\")));\n  };\n}\n\nexport default Symbols;\n\n// { symbol: \"AAPL\", name: \"Apple Inc.\" },\n//       { symbol: \"GOOG\", name: \"Google Ltd.\" },\n//       { symbol: \"AAPL\", name: \"Apple Inc.\" },\n//       { symbol: \"GOOG\", name: \"Google Ltd.\" },\n//       { symbol: \"AAPL\", name: \"Apple Inc.\" },\n//       { symbol: \"GOOG\", name: \"Google Ltd.\" },\n//       { symbol: \"AAPL\", name: \"Apple Inc.\" },\n//       { symbol: \"GOOG\", name: \"Google Ltd.\" },\n//       { symbol: \"AAPL\", name: \"Apple Inc.\" },\n//       { symbol: \"GOOG\", name: \"Google Ltd.\" },\n//       { symbol: \"AAPL\", name: \"Apple Inc.\" },\n//       { symbol: \"GOOG\", name: \"Google Ltd.\" },\n//       { symbol: \"AAPL\", name: \"Apple Inc.\" },\n//       { symbol: \"GOOG\", name: \"Google Ltd.\" }\n","import React, { Component } from \"react\";\nimport NavBar from \"./components/navbar\";\nimport Quotes from \"./components/quotes\";\nimport Symbols from \"./components/symbols\";\nimport { HashRouter as Router, Switch, Route } from \"react-router-dom\";\n\nexport const BASE_URL = \"https://cloud.iexapis.com/stable/\";\nexport const TOKEN = \"?token=pk_5e8577fd11eb4469be629c5e2de8023f\";\n\nclass App extends Component {\n  state = {};\n\n  render() {\n    return (\n      <Router>\n        <div className=\"pt-70\">\n          <NavBar />\n          <Switch>\n            <Route path=\"/symbols\" component={Symbols} />\n            <Route path=\"/\" component={Quotes} />\n          </Switch>\n        </div>\n      </Router>\n    );\n  }\n\n  componentWillMount() {\n    document.body.style.paddingTop = \"65px\";\n    console.log(\"hey\");\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n//serviceWorker.unregister();\n"],"sourceRoot":""}